name: Build & Push Frontend Image on Tag

on:
  push:
    tags:
      - 'v*'   # reagiert z.B. auf v1.2.3

env:
  IMAGE_NAME: raffaelhu/${{ vars.CUSTOMER_KEY }}-bookkeeper

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Derive tag from ref
        id: meta
        run: |
          TAG="${GITHUB_REF_NAME#v}"   # v1.2.3 -> 1.2.3
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Detect Dockerfile location
        id: detect
        shell: bash
        run: |
          if [[ -f ./frontend/Dockerfile ]]; then
            echo "context=./frontend" >> "$GITHUB_OUTPUT"
            echo "dockerfile=./frontend/Dockerfile" >> "$GITHUB_OUTPUT"
          elif [[ -f ./Dockerfile ]]; then
            echo "context=." >> "$GITHUB_OUTPUT"
            echo "dockerfile=./Dockerfile" >> "$GITHUB_OUTPUT"
          else
            echo "Kein Dockerfile gefunden (./frontend/Dockerfile oder ./Dockerfile erwartet)." >&2
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (multi-platform)
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.detect.outputs.context }}
          file: ${{ steps.detect.outputs.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
